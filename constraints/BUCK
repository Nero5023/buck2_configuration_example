# //constraints/BUCK

# constraint_setting defines a key for a logical group of constraint values. A configuration can only
# have at most one constraint value set for each constraint_settings
constraint_setting(
    name = "arch",
)

constraint_value(
    name = "x86",
    constraint_setting = ":arch",
)

constraint_value(
    name = "arm64",
    constraint_setting = ":arch",
)

constraint_setting(
    name = "os",
)

constraint_value(
    name = "windows",
    constraint_setting = ":os",
)

constraint_value(
    name = "mac",
    constraint_setting = ":os",
)

constraint_setting(
    name = "mode",
)

constraint_value(
    name = "dev",
    constraint_settings = ":mode",
)

constraint_value(
    name = "opt",
    constraint_settings = ":mode",
)

# can use config_setting to group constraint values into larger logical pieces
config_setting(
    name = "mac-arm64",
    constraint_values = [
        ":mac",
        ":arm64",
    ]
)

config_setting(
    name = "windows-arm64",
    constraint_values = [
        ":windows",
        ":arm64",
    ]
)

# an example of checking a buckconfig value. If the buckconfig is set,
# this config_setting is satisfied in all configurations
config_setting(
    name = "check_some_config",
    values = {
        "foo.fastmode_enabled": "true",
    }
)